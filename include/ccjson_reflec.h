#ifndef CCJSON_JSON_REFLECT_H
#define CCJSON_JSON_REFLECT_H

#include "ccjson.h"
#include <string>

namespace ccjson::reflect {

// BEGIN GENERATED BY foreachgen.py
#define REFLECT_PP_FOREACH_1(f, _1) f(_1)
#define REFLECT_PP_FOREACH_2(f, _1, _2) f(_1) f(_2)
#define REFLECT_PP_FOREACH_3(f, _1, _2, _3) f(_1) f(_2) f(_3)
#define REFLECT_PP_FOREACH_4(f, _1, _2, _3, _4) f(_1) f(_2) f(_3) f(_4)
#define REFLECT_PP_FOREACH_5(f, _1, _2, _3, _4, _5) f(_1) f(_2) f(_3) f(_4) f(_5)
#define REFLECT_PP_FOREACH_6(f, _1, _2, _3, _4, _5, _6) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6)
#define REFLECT_PP_FOREACH_7(f, _1, _2, _3, _4, _5, _6, _7)                                        \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7)
#define REFLECT_PP_FOREACH_8(f, _1, _2, _3, _4, _5, _6, _7, _8)                                    \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8)
#define REFLECT_PP_FOREACH_9(f, _1, _2, _3, _4, _5, _6, _7, _8, _9)                                \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9)
#define REFLECT_PP_FOREACH_10(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10)                          \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10)
#define REFLECT_PP_FOREACH_11(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11)                     \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11)
#define REFLECT_PP_FOREACH_12(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12)                \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12)
#define REFLECT_PP_FOREACH_13(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13)           \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13)
#define REFLECT_PP_FOREACH_14(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14)      \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)
#define REFLECT_PP_FOREACH_15(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15) \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15)
#define REFLECT_PP_FOREACH_16(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16)                                                                 \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16)
#define REFLECT_PP_FOREACH_17(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17)                                                            \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17)
#define REFLECT_PP_FOREACH_18(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17, _18)                                                       \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17) f(_18)
#define REFLECT_PP_FOREACH_19(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17, _18, _19)                                                  \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17) f(_18) f(_19)
#define REFLECT_PP_FOREACH_20(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17, _18, _19, _20)                                             \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17) f(_18) f(_19) f(_20)
#define REFLECT_PP_FOREACH_21(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17, _18, _19, _20, _21)                                        \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21)
#define REFLECT_PP_FOREACH_22(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17, _18, _19, _20, _21, _22)                                   \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22)
#define REFLECT_PP_FOREACH_23(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17, _18, _19, _20, _21, _22, _23)                              \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23)
#define REFLECT_PP_FOREACH_24(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17, _18, _19, _20, _21, _22, _23, _24)                         \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24)
#define REFLECT_PP_FOREACH_25(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17, _18, _19, _20, _21, _22, _23, _24, _25)                    \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25)
#define REFLECT_PP_FOREACH_26(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26)               \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26)
#define REFLECT_PP_FOREACH_27(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27)          \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27)
#define REFLECT_PP_FOREACH_28(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28)     \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) \
            f(_28)
#define REFLECT_PP_FOREACH_29(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28,     \
                              _29)                                                                 \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) \
            f(_28) f(_29)
#define REFLECT_PP_FOREACH_30(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28,     \
                              _29, _30)                                                            \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) \
            f(_28) f(_29) f(_30)
#define REFLECT_PP_FOREACH_31(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28,     \
                              _29, _30, _31)                                                       \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) \
            f(_28) f(_29) f(_30) f(_31)
#define REFLECT_PP_FOREACH_32(f, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, \
                              _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28,     \
                              _29, _30, _31, _32)                                                  \
    f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)       \
        f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) \
            f(_28) f(_29) f(_30) f(_31) f(_32)
#define REFLECT_PP_NARGS_IMPL(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15,    \
                              _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28,     \
                              _29, _30, _31, _32, N, ...)                                          \
    N
#define REFLECT_PP_NARGS(...)                                                                      \
    REFLECT_PP_NARGS_IMPL(__VA_ARGS__, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, \
                          17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
// END GENERATED BY foreachgen.py

#define REFLECT_EXPAND(...) __VA_ARGS__
#define REFLECT_CONCAT_2(x, y) x##y
#define REFLECT_CONCAT(x, y) REFLECT_CONCAT_2(x, y)

#define REFLECT_PP_FOREACH(f, ...)                                                                 \
    REFLECT_EXPAND(REFLECT_CONCAT(REFLECT_PP_FOREACH_, REFLECT_PP_NARGS(__VA_ARGS__)))             \
    (f, __VA_ARGS__)

// 定义一个仿函数（functor）替代 lambda
struct ForEachMemberTest {
    template <typename U>
    void operator()(const char*, U&) const {}
};

// SFINAE 检测是否可调用 `for_each_members`
template <typename T, typename = void>
struct HasForEachMember : std::false_type {};

template <typename T>
struct HasForEachMember<T,
                        std::void_t<decltype(std::declval<T>().forEachMember(ForEachMemberTest{}))>>
    : std::true_type {};

template <typename T>
struct ReflectTrait {
    static constexpr bool hasForEachMember() {
        return HasForEachMember<T>::value;
    }

    template <typename Function>
    static constexpr void forEachMember(const T& self, Function&& function) {
        const_cast<T&>(self).forEachMember(function);
    }
};

#define REFLECT_TYPE_ONE_OBJECT_MEMBER(name) function(#name, object.name);

#define REFLECT_TYPE(Object, ...)                                                                  \
    template <>                                                                                    \
    struct ccjson::reflect::ReflectTrait<Object> {                                                 \
        static constexpr bool hasForEachMember() {                                                 \
            return true;                                                                           \
        }                                                                                          \
                                                                                                   \
        template <typename Function>                                                               \
        static constexpr void forEachMember(const Object& cobject, Function function) {            \
            auto& object = const_cast<Object&>(cobject);                                           \
            REFLECT_PP_FOREACH(REFLECT_TYPE_ONE_OBJECT_MEMBER, __VA_ARGS__)                        \
        }                                                                                          \
    };

// 去掉模板调用时的()
#define REFLECT_TYPE_TEMPLATED_FIRST(x, ...) REFLECT_EXPAND x
#define REFLECT_TYPE_TEMPLATED_REST(x, ...) __VA_ARGS__

#define REFLECT_TYPE_TEMPLATED(Type, ...)                                                          \
    template <REFLECT_EXPAND(REFLECT_TYPE_TEMPLATED_REST Type)>                                    \
    struct ccjson::reflect::ReflectTrait<REFLECT_EXPAND(REFLECT_TYPE_TEMPLATED_FIRST Type)> {      \
        static constexpr bool hasForEachMember() {                                                 \
            return true;                                                                           \
        };                                                                                         \
                                                                                                   \
        template <typename Function>                                                               \
        static constexpr void                                                                      \
        forEachMember(const REFLECT_EXPAND(REFLECT_TYPE_TEMPLATED_FIRST Type) & cobject,           \
                      Function function) {                                                         \
            auto& object =                                                                         \
                const_cast<REFLECT_EXPAND(REFLECT_TYPE_TEMPLATED_FIRST Type)&>(cobject);           \
            REFLECT_PP_FOREACH(REFLECT_TYPE_ONE_OBJECT_MEMBER, __VA_ARGS__)                        \
        }                                                                                          \
    };

#define REFLECT_ONE_OBJECT_MEMBER(name) function(#name, name);

#define REFLECT(...)                                                                               \
    static constexpr bool hasForEachMember() {                                                     \
        return true;                                                                               \
    }                                                                                              \
                                                                                                   \
    template <typename Function>                                                                   \
    constexpr void forEachMember(Function&& function) {                                            \
        REFLECT_PP_FOREACH(REFLECT_ONE_OBJECT_MEMBER, __VA_ARGS__)                                 \
    }

template <typename T,
          typename std::enable_if<!reflect::ReflectTrait<T>::hasForEachMember(), int>::type = 0>
ccjson::JsonValue serialize(const T& object) {
    return object;
}

template <typename T,
          typename std::enable_if<reflect::ReflectTrait<T>::hasForEachMember(), int>::type = 0>
ccjson::JsonValue serialize(const T& object) {
    ccjson::JsonValue root;
    ccjson::reflect::ReflectTrait<T>::forEachMember(object, [&](const char* key, auto& value) {
        // value可能为struct,因此需要实现toJson函数
        root[key] = serialize(value);
    });
    return root;
}

template <typename T,
          typename std::enable_if<!reflect::ReflectTrait<T>::hasForEachMember(), int>::type = 0>
T deserialize(const ccjson::JsonValue& root) {
    return root.get<T>();
}

template <typename T,
          typename std::enable_if<reflect::ReflectTrait<T>::hasForEachMember(), int>::type = 0>
T deserialize(const ccjson::JsonValue& root) {
    T object;
    ccjson::reflect::ReflectTrait<T>::forEachMember(object, [&](const char* key, auto& value) {
        value = deserialize<std::decay_t<decltype(value)>>(root[key]);
    });
    return object;
}

template <typename T>
T deserialize(const std::string& json) {
    return deserialize<T>(ccjson::JsonParser::parse(json));
}
}  // namespace ccjson::reflect
#endif